'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/adobe/photoshop/','title':"Adobe Photoshop",'section':"Adobe Apps",'content':"Adobe Photoshop #  Adobe Photoshop is the preeminent Image Editing program produced by Adobe. Photoshop can be used for editing / enhancing photographs as well as producing entirely new image assets.\nFile Management #  Photoshop files are saved in .psd format. They can be stored on your local machine or in cloud storage at Adobe. These files often grow to extreamely large file sizes, making their binary format particularly unsuited for version control.\nSmart Objects #  Smart Objects are references to other image assets included in .psd files. These Smart Objects can either be embeded in the host file or linked from the file system. Smart Objects are represented as a type of layer in the host file. These layers can be cropped or transformed with simple position or scale transformations.\nEmbeded Smart Objects are copied \u0026lsquo;as-is\u0026rsquo; into the host file. This means the host file can be moved without disrupting any linkages, but increases the file size.\nLinked Smart Objects are more like symbolic links within the .psd file. Linked Smart Objects are absolute or relative file paths to include another image as a layer. Linked Smart Objects do not increase the host file size beyond simple metadata. In addition, multiple .psd files can all have linkages to the same source file. Updates to the linked file will update all instances included in host files. However, because the reference is a simple file path if either the PSD file or source file are moved the linkage will break.\nArtboards #  Artboards are a group mechanism in PSD files for grouping one or more layers or layer groups. Artboards are sized to particular device resolution layouts and clip all their content to the view port. Use them for producing assets for different device formats.\nLibraries #  Libraries are packages of assets across all Adobe Apps which can be shared and synchronized across Creative Cloud. Useful for teams to maintain consistency of design elements across projects.\nAutomation #  Actions #  Photoshop Actions are a series of pre-defined tasks which can be played back on a single or group of files. These can be used to automate a large number of common, repeated operations of image editing. Actions can also be exported into .atn files which can be shared.\nDroplets #  Photoshop Droplets are \u0026ldquo;stand alone\u0026rdquo; application that apply one or more Actions to an image. Droplets can be created from a list of actions, and are linked to an install of Photoshop. Droplets actually involve a running instance of Photoshop.\nData-Driven Graphics #  Data Driven Graphics are image templates with a set of variables which modify the image.\nVariables come in three forms:\n Visibility variables show or hide the content of a layer. Pixel Replacement variables replace the pixels in the layer with pixels from another image file. Text Replacement variables replace a string of text in a type layer.  "});index.add({'id':1,'href':'/docs/web-domains/github-pages/','title':"GitHub Pages",'section':"Web Domains",'content':"GitHug Pages #  GitHug Pages is a static file hosting offering from GitHub to host content directly out of a GitHug Repository.\nPages is free for public repos with GitHub Free.\nBy default, GitHub Pages are hosted at \u0026lt;user\u0026gt;.github.io/\u0026lt;repository\u0026gt;.\nConfiguration #  GitHub Pages must be enabled in your Repository Settings page. Visit Settings \u0026gt; Options \u0026gt; GitHug Pages.\nSelect a source branch to build github pages. It can either build from the branch root / or the /docs directory. Only these two roots are usable. If you need to build your docs from another path consider using a GitHub Action to push that directory onto another branch to build from the root of that branch.\nConvention disctates the branch to build GitHub Pages from be gh-pages, but any branch can be specified.\nCustom Domain #  GitHub Pages can be hosted from a Custom Domain (i.e. brisberg.dev).\nPurchase a custom domain name from a registrar such as Google Domains.\nPoint that Domain to \u0026lt;user\u0026gt;.github.io and add a CNAME file to the root of your pages branch which contains your domain.\nSee blog post for details.\nUser Pages #  There is an optional side benefit for creating a User GitHub Pages site with a custom domain name.\nIf you create a special repository called \u0026lt;user\u0026gt;.github.io, this will be a User GitHub Pages site. It will be hosted at \u0026lt;user\u0026gt;.github.io directly, instead of \u0026lt;user\u0026gt;.github.io/\u0026lt;user\u0026gt;.github.io.\nSpecifying a CNAME in this repository will autimatically apply to all other GitHub Pages hosting of all other GitHub repositories you own.\nFor example:\n Specify a CNAME of www.mydomain.com for \u0026lt;user\u0026gt;.github.io. Then another project hosted on GitHub pages will be accessible at www.mydomain.com/\u0026lt;repository\u0026gt; instead of \u0026lt;user\u0026gt;.github.io/\u0026lt;repository\u0026gt;.  "});index.add({'id':2,'href':'/docs/hugo/','title':"Hugo",'section':"Docs",'content':"Hugo #  Hugo is a Static-Site-Generator written in Go. It claims to be the fastest SSG around because it is based on Golang\u0026rsquo;s html/templating libraries.\nIt can be used to generate beautiful static websites and comes with a number of themes to choose from.\nInstallation #  I chose the simplest installtion for MacOs by using HomeBrew.\nbrew install hugo Modules Modules There is another way to use hugo based on Go Modules. This is the future, but it says it isn\u0026rsquo;t fully tested yet. I may switch to it in the future.\nUntil then the default way to install themes is with Git Submodules.\n  Customizing #  You can customize nearly anything you like about Hugo (and then export that as a theme if you wish). Or you can layer your changes on top of an existing theme.\nHugo makes a bunch of assumptions about the structure of your site, as all of your content pages will be under the content/ directory. Depending on which subdirectory you choose it will interpret the content type. You can override this with a Front Matter, basically a YAML block at the top of the markdown file which Hugo will use when generating. The Front Matter can override most things.\nIt is useful to examine the theme for which layouts / config params it is looking for. These isn\u0026rsquo;t a clean declaration of all the options available. See variables docs for existing builtin Hugo variables at the Site and Page level.\nSome useful ones:\n Type: Override the inferred content type, meaning you can use a different template Slug: Override the url slug used (default is the file name). E.x. /pages/apps-slug. Url: Override the url from the site root to this page. E.x. /pages/apps -\u0026gt; /apps. This can create circular references so be careful.  "});index.add({'id':3,'href':'/docs/frontend-frameworks/svelte/','title':"Svelte",'section':"Frontend Frameworks",'content':"Svelte (3) #  Svelte is a radical new approach to building user interfaces. Whereas traditional frameworks like React and Vue do the bulk of their work in the browser, Svelte shifts that work into a compile step that happens when you build your app.\nInstead of using techniques like virtual DOM diffing, Svelte writes code that surgically updates the DOM when the state of your app changes.\nSvelte 3 (released in late 2019) brings many innovative new features to the web landscape. See their introductory blog post for more.\nSvelte Compiler #  Unlike other frameworks which include the framework core as a runtime dependency, Svelte does something different. Svelte is more like a \u0026quot;compiler\u0026quot; for .svelte files into JavaScript for the browser. This means the framework disappears at build time, and only the portions used by your app are sent to the browser.\nThis is also how Svelte instraments reactivity, by inserting it into your code at compile time.\nTypeScript Support #  Svelte 3 added TypeScript support in July 2020 (See their blog post). This means you can write TypeScript code in .svelte \u0026lt;script\u0026gt; tags using the lang=ts attribute. Also you can pass .ts files to the Svelte compiler for output generation.\nUnit Testing #  Most Svelte unit testing is performed using the @testing-library/svelte testing library. (Docs). This is a set of compatibility wrappers around the Dom Testing Library for easy use with different libraries, including Svelte.\nExample App #  My sample application written in Svelte can be found at Svelte Sample.\n # Sources  Fireship - This video by Fireship does a great job introducing the framework and highlighting its killer features compared to other frameworks. svelte.dev - The main Svelte documentation website.  "});index.add({'id':4,'href':'/docs/adobe/','title':"Adobe Apps",'section':"Docs",'content':"Adobe Apps #  Adobe produces some of the most powerful and professional image editing and content authoring tools in the world. Photoshop is the most popular image editing program.\nPricing #  Photoshop (and other Adobe Products) can only be purchased as a subscription through Adobe Creative Cloud. A subscription will get all new features and updates from Adobe.\nPhotoshop alone costs $21 per month, while the Creative Cloud Bundle of all apps costs $52 per month. See Plans for latest pricing.\nCreative Cloud #  Adobe offers Creative Cloud as a update manager and file storage engine for creative projects.\n"});index.add({'id':5,'href':'/docs/web-domains/google-domains/','title':"Google Domains",'section':"Web Domains",'content':"Google Domains #  Google Domains is Google\u0026rsquo;s Domain Name Registrar and Domain Name Server offering.\nGoogle Domains offers a single location to manage Domain Name purchases, and DNS configurations for purchased domains.\nFeatures #   Privacy Protection - Google uses a third-party service to alias your personal information in the WHOIS internet registry. Google DNS Servers \u0026amp; Configs SSL/TLS certificates (for HTTPS) Custom Email Advertisements  DNS Configuration #  DNS Servers #  Google Domains defaults to using Google owned Domain Name Servers. You can specify your own if you wish.\nDNSSEC #  Domain Name System Security Extensions (DNSSEC) protect your domain from attacks such as DNS cache poison attacks and DNS spoofing. More\nSyntetic Records #  Synthetic records allow you to add common features, such as domain forwarding or Google Workspace, to your domain in one step. Each synthetic record is an automatically-generated collection of resource records related to a specific feature.\nThese records are groupings of DNS directives to accomplish common tasks. I could not get the subdomain forwarding synthetic records to work with GitHub Pages hosting.\nCustom Resource Records #  Resource records define how your domain behaves. Common uses include pointing your domain at your web server or configuring email delivery for your domain.\nResource Records are common features to all DNS services. They include things like CNAME, Alias, and Ipv6 Alias records for configuring a Domain.\n"});index.add({'id':6,'href':'/docs/web-domains/','title':"Web Domains",'section':"Docs",'content':"Web Domains #  How the internet works is a broad and very technical topic which involves everything from Internet Protocols to Routing Tables. Others have already summarized the it better than I can.\nAnatomy of a URL #  The important thing for understanding Web Hosting is how browsers and routers translate a URL into a concrete destination server. A URL stands for Uniform Resource Locator; meaning it is a Universal identifier to Locate a Resource on the internet.\nURLs are made up of several component parts, each of which has a specific meaning:\nImage from Doepud Web Design See this excellent write-up for details about all URL components, but for setting up Web Hosting we are mainly concerned with the following:\n Top-level Domain - TLDs are the highest level divisions in the Domain Name System. These domains are usually mained by International Organizations and include common domains like .com, .org, .gov, as well as more specialized domains like .fr, .jp, and Google\u0026rsquo;s .dev. Domain Name - Domain names are specific domains within a Top-level Domain and are usually owned by a single entity. For examlpe google.com is the domain name for Google Inc. under the .com top-level domain. Subdomain - Subdomains are named domains within a particular Domain Name. For example maps.google.com specifies the maps subdomain under the google.com domain. www is the default subdomain for all domains and can often be omitted when entering a URL.  Purchase a Domain Name #  When an end user wants to register a new website location with the DNS, they will usually purchase a Domain Name from a Registrar.\nTop-level Domains are specified by international organizations and are not available for ownership by any business entity.\nDomain names can be purchased on a monthly or yearly basis and no other user can claim that Domain in the mean time.\nOnce you own a Domain Name, you can also supply an unlimited number of Subdomains for any purpose.\nThere are a large number of DNS Registrars from which you can purchase domains. These are some of the most popular:\n Google Domains Wix.com GoDaddy namecheap  My best experience so far is with Google Domains, as they usually had lower prices on many domains. Google is the only provider of their new TLDs .dev and .page.\n"});index.add({'id':7,'href':'/docs/version-control/git/git-on-mac/','title':"Git on Mac",'section':"Git",'content':"Git on Mac #  I an investigating how to support automatic authentication for two different GitHub logins.\nApple\u0026rsquo;s forked version of Git #  Apple maintains their own version of Git for deployment on their machines. One of the things this does is force include a gitconfig file. (located at /Applications/Xcode.app/Contents/Developer/usr/share/git-core/gitconfig)\n$ git --version # git version 2.24.3 (Apple Git-128) This config sets the credential.helper field to osxkeychain to use the built in OSX keychain helper.\nNormally this would be fine for a single GitHub login across your whole system, but there is no way to override this.\nA suggestion is to use Homebrew to install normal git which will use any config scheme you ask for.\n$ brew install git # brew install output omitted # open a new shell $ git --version git version 2.29.2 Suggestion to use Homebrew installed Git\nThen you can use split Config files to access different credential sources.\nhttps://stackoverflow.com/a/43884702\nThis lets you use a different config file based on directory.\nLinks #  http://www.macfreek.nl/memory/Git_Passwords_in_the_Keychain#Third_Party_Credential_Helpers\nDirectory Based Configs IncludeIF Suggestion\nAlternatives #  You can simply pass the \u0026ldquo;useHttpPath\u0026rdquo; to the osxkeychain helper so that it matches each full URL. This means you need to enter your password for each repository.\nThis isn\u0026rsquo;t idea, especially because 2-factor auth requires a PAT instead of a password. So it is hard to remember the password.\nGuide\n"});index.add({'id':8,'href':'/posts/','title':"Blog",'section':"Introduction",'content':"Wiki Blog has been removed, as this site only supports the Knowledge Wiki.\nFor personal blog, see see My Blog.\nFor the original Hugo Book Theme example blog, see Example Blog. It has some good information about Hugo-Book and Hugo in general.\n"});index.add({'id':9,'href':'/docs/version-control/git/','title':"Git",'section':"Version Control",'content':"Git #  Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\nHosts #  Git Repositories can be self hosted on your own server, or hosted on one of several public hosting / collaboration platforms:\nGitHub #  GitHub is the largest and most popular Git Hosting provider in the world. They offer repositories for open source as well a private reposiroties for individuals, small teams, or enterprise customers. GitHub was acquired by Microsoft in 2018.\nGitHub offers native Continuous Integration workflows using GitHub Actions.\nGitHub Pages offers static asset hosting directly out of a GitHub Repository.\nGitHub is my favorite Git Host and nearly all of my coding projects are hosted there.\nGitLab #  GitLab is a large Git Hosting provider. GitLab is free for open source repos.\nGitLab comes with a CI/CD offering called GitLab CI.\nGitLab offers many options for orgainizing teams, companies, repositories, projects, etc.\nBitbucket #  Bitbucket is a repository host provided by Atlassian.\nAtlassian also provides Jira (ticket tracking software), Confluence (colaborative Wiki), and Trello (task management) products for software teams. Understandably Bitbucket comes with excellent integrations with these products out of the box.\nBitbucket provides their own CI/CD solution.\n"});index.add({'id':10,'href':'/docs/hugo/themes/','title':"Themes",'section':"Hugo",'content':"Themes #  Themes are packages of templates, css, and javascript used by the Hugo engine to produce a Static Site. There are many popular themes to choose from highlighted on Hugo Themes.\nBelow are my notes and observations on the few with which I am familiar.\nMinimal #  Minimal is a simple, clean interface and a reasonable amount of features.\nnikitavoloboev uses it for his home site and I am following in his example to using it for my own home site.\nBook #  Book is a minimalist theme specialized for documentation websites.\nBook has many of the features ideal for a Knowledge Wiki:\n Flexible, tree-based navigation menu Simple and effective shortcodes Table of Contents for each page Git Integration for calculating last edit time and one-click editing. Integrated Search using flexsearch Light/Dark Theme  I can currently using this theme for my Knowledge Wiki.\nZdoc #  Zdoc (Demo) is an opinionated wiki framework for creating documentation websites.\nZdoc differs from Book in the following ways:\n Navigation Menu only displays the current tree level Similar shortcodes Language Dropdown Integrated Search using Fuse.js Light/Dark Theme toggle  Search experience is better because it includes match previews. Search Index is pre-built at Hugo build time so is fast on the client.\nLight/Dark Theme toggle is gives better user control, and saves preference to Local Storage.\nHowever, I found it a bit more cumbersome and visualy more noisy than I intended. It doesn\u0026rsquo;t match the Minimal theme of brisberg.dev as well as I\u0026rsquo;d like.\nMy previous attempt to use this theme is preserved in this branch for posterity.\n"});})();